ISO_DICT = {
        '1': 'USA/Canada',
    '7': 'Russia/Kazakhstan',
    '20': 'Egypt',
    '27': 'South Africa',
    '30': 'Greece',
    '31': 'Netherlands',
    '32': 'Belgium',
    '33': 'France',
    '34': 'Spain',
    '36': 'Hungary',
    '39': 'Italy/San Marino/Vatican City',
    '40': 'Romania',
    '41': 'Switzerland',
    '43': 'Austria',
    '44': 'United Kingdom',
    '45': 'Denmark',
    '46': 'Sweden',
    '47': 'Norway/Svalbard and Jan Mayen',
    '48': 'Poland',
    '49': 'Germany',
    '50': 'Aruba/Curaçao/Netherlands Antilles',
    '51': 'Peru',
    '52': 'Mexico',
    '53': 'Cuba',
    '54': 'Argentina',
    '55': 'Brazil',
    '56': 'Chile',
    '57': 'Colombia',
    '58': 'Venezuela',
    '60': 'Malaysia',
    '61': 'Australia',
    '62': 'Indonesia',
    '63': 'Philippines',
    '64': 'New Zealand',
    '65': 'Singapore',
    '66': 'Thailand',
    '67': 'Cambodia',
    '68': 'Fiji/Western Samoa/Cook Islands',
    '69': 'Marshall Islands/Federated States of Micronesia/Palau',
    '77': 'Kazakhstan',   
    '81': 'Japan',
    '82': 'South Korea',
    '84': 'Vietnam',
    '86': 'China',
    '87': 'Satellite services (e.g., Inmarsat)',
    '88': 'Bangladesh',
    '90': 'Turkey',
    '91': 'India',
    '92': 'Pakistan',
    '93': 'Afghanistan',
    '94': 'Sri Lanka',
    '95': 'Myanmar (Burma)',
    '96': 'Lebanon/Jordan/Syria/Iraq/Kuwait/UAE',
    '97': 'Israel/Oman/Qatar/Bahrain/Saudi Arabia',
    '98': 'Iran',
    '211': 'South Sudan',
    '212': 'Morocco/Western Sahara',
    '213': 'Algeria',
    '216': 'Tunisia',
    '218': 'Libya',
    '220': 'Gambia',
    '221': 'Senegal',
    '222': 'Mauritania',
    '223': 'Mali',
    '224': 'Guinea',
    '225': 'Ivory Coast',
    '226': 'Burkina Faso',
    '227': 'Niger',
    '228': 'Togo',
    '229': 'Benin',
    '230': 'Mauritius',
    '231': 'Liberia',
    '232': 'Sierra Leone',
    '233': 'Ghana',
    '234': 'Nigeria',
    '235': 'Chad',
    '236': 'Central African Republic',
    '237': 'Cameroon',
    '238': 'Cape Verde',
    '239': 'São Tomé and Príncipe',
    '240': 'Equatorial Guinea',
    '241': 'Gabon',
    '242': 'Republic of the Congo',
    '243': 'Democratic Republic of the Congo',
    '244': 'Angola',
    '245': 'Guinea-Bissau',
    '246': 'British Indian Ocean Territory',
    '247': 'Ascension Island',
    '248': 'Seychelles',
    '249': 'Sudan',
    '250': 'Rwanda',
    '251': 'Ethiopia',
    '252': 'Somalia',
    '253': 'Djibouti',
    '254': 'Kenya',
    '255': 'Tanzania',
    '256': 'Uganda',
    '257': 'Burundi',
    '258': 'Mozambique',
    '259': 'Mozambique',
    '260': 'Zambia',
    '261': 'Madagascar',
    '262': 'Réunion/Mayotte',
    '263': 'Zimbabwe',
    '264': 'Namibia',
    '265': 'Malawi',
    '266': 'Lesotho',
    '267': 'Botswana',
    '268': 'Eswatini',
    '269': 'Comoros',
    '290': 'Saint Helena',
    '291': 'Eritrea',
    '293': 'Slovenia',
    '295': 'San Marino',
    '297': 'Aruba',
    '298': 'Faroe Islands',
    '299': 'Greenland',
    '350': 'Gibraltar',
    '351': 'Portugal',
    '352': 'Luxembourg',
    '353': 'Ireland',
    '354': 'Iceland',
    '355': 'Albania',
    '356': 'Malta',
    '357': 'Cyprus',
    '358': 'Finland/Aland Islands',
    '359': 'Bulgaria',
    '370': 'Lithuania',
    '371': 'Latvia',
    '372': 'Estonia',
    '373': 'Moldova',
    '374': 'Armenia',
    '375': 'Belarus',
    '376': 'Andorra',
    '377': 'Monaco',
    '378': 'San Marino',
    '379': 'Vatican City',
    '380': 'Ukraine',
    '381': 'Serbia',
    '382': 'Montenegro',
    '383': 'Kosovo',
    '385': 'Croatia',
    '386': 'Slovenia',
    '387': 'Bosnia and Herzegovina',
    '389': 'North Macedonia',
    '420': 'Czech Republic',
    '421': 'Slovakia',
    '423': 'Liechtenstein',
    '431': 'Netherlands',
    '434': 'Azerbaijan',
    '435': 'Azerbaijan',
    '439': 'Italy',
    '441': 'United Kingdom',
    '442': 'United Kingdom',
    '443': 'United Kingdom',
    '444': 'United Kingdom',
    '445': 'United Kingdom',
    '446': 'United Kingdom',
    '447': 'United Kingdom',
    '448': 'United Kingdom',
    '449': 'United Kingdom',
    '458': 'Malaysia',
    '459': 'Malaysia',
    '460': 'Maldives',
    '466': 'Taiwan',
    '473': 'Grenada',
    '500': 'UK - Falkland Islands',
    '501': 'Belize',
    '502': 'Guatemala',
    '503': 'El Salvador',
    '504': 'Honduras',
    '505': 'Nicaragua',
    '506': 'Costa Rica',
    '507': 'Panama',
    '508': 'Saint Pierre and Miquelon',
    '509': 'Haiti',
    '590': 'Guadeloupe',
    '591': 'Bolivia',
    '592': 'Guyana',
    '593': 'Ecuador',
    '594': 'French Guiana',
    '595': 'Paraguay',
    '596': 'Martinique',
    '597': 'Suriname',
    '598': 'Uruguay',
    '599': 'Curaçao',
    '670': 'East Timor',
    '671': 'Northern Mariana Islands',
    '672': 'Australian Antarctic Territory',
    '673': 'Brunei',
    '674': 'Nauru',
    '675': 'Papua New Guinea',
    '676': 'Tonga',
    '677': 'Solomon Islands',
    '678': 'Vanuatu',
    '679': 'Fiji',
    '680': 'Palau',
    '681': 'Wallis and Futuna',
    '682': 'Cook Islands',
    '683': 'Niue',
    '684': 'American Samoa',
    '685': 'Samoa',
    '686': 'Kiribati',
    '687': 'New Caledonia',
    '688': 'Tuvalu',
    '689': 'French Polynesia',
    '690': 'Tokelau',
    '691': 'Micronesia',
    '692': 'Marshall Islands',
    '7': 'Russia/Kazakhstan',   
    '81': 'Japan',   
    '82': 'South Korea',   
    '84': 'Vietnam',   
    '86': 'China',   
    '87': 'Satellite services',
    '88': 'Bangladesh',   
    '90': 'Turkey',   
    '91': 'India',   
    '92': 'Pakistan',   
    '93': 'Afghanistan',   
    '94': 'Sri Lanka',   
    '95': 'Myanmar (Burma)',   
    '96': 'Middle East',
    '97': 'Middle East',
    '98': 'Iran',
}

def numbers_processing(text):
    elems = text.split()
    numbers = []
    simbs = '()-+'
    alp = 'qwertyuiopasdfghjklzxcvbnm'
    for elem in elems:
        count_elem = 0
        for i in range(len(elem)):
            if elem[i].lower() not in alp or elem[i] in simbs:
                count_elem += 1
        if count_elem == len(elem) and len(elem) >= 8:
            found = False
            for code in ISO_DICT:
                if elem[1:].startswith(code):
                    country_name = ISO_DICT[code]
                    numbers.append(f"{country_name} - {elem}")
    if numbers:
        return numbers
    return []

text = input("Enter text: ")
number = numbers_processing(text)
print(number)